// Generated by the WOLips Template engine Plug-in at Jan 10, 2010 12:00:00 PM
package ${basePackage};

import org.apache.log4j.Logger;

import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOEnterpriseObject;

import er.corebusinesslogic.ERCoreBusinessLogic;
import er.extensions.appserver.ERXSession;

public class Session extends ERXSession {
	private static final Logger log = Logger.getLogger(Session.class);
	
	public Session() {
		log.debug("Session created: " + sessionID());
		
		setStoresIDsInCookies(true);
		setStoresIDsInURLs(false);
	}

	private Boolean acceptsXHTML = null;
	private static final String acceptKey = "accept";
	private static final String contentTypeKey = "content-type";
	private static final String htmlType = "text/html";
	private static final String xhtmlType = "application/xhtml+xml";

	/**
	 * <p>Since R2D2W is generating XHTML, override this method
	 * to set the response <code>content-type</code> header to
	 * <code>application/xhtml+xml</code> if the browser accepts it. 
	 * This should:</p>
	 * <ul><li>Allow for faster page rendering because the browser 
	 * does not need to correct errors.</li>
	 * <li>Cause rendering to fail if the page is not well formed.</li>
	 * <li>Allow for interesting things like inline SVG</li></ul>
	 */
	public void appendToResponse(WOResponse response, WOContext context) {
		if (acceptsXHTML == null) {
			String acceptTypes = context.request().headerForKey(acceptKey);
			acceptsXHTML = (acceptTypes != null && acceptTypes.contains(xhtmlType));
		}
		if (acceptsXHTML) {
			String responseType = response.headerForKey(contentTypeKey);
			if (responseType.equals(htmlType)) {
				response.setHeader(xhtmlType, contentTypeKey);	
			}
		}
		super.appendToResponse(response, context);

	}
	
    public void awake() {
        super.awake();
        
        /* Set the current actor */
        if (objectForKey("user") != null) {
            ERCoreBusinessLogic.setActor((EOEnterpriseObject)objectForKey("user"));
        }
    }

    public void sleep() {
    	
    	/* Reset the current actor */
        ERCoreBusinessLogic.setActor(null);
        
        super.sleep();
    }

}
