Index: Sources/er/extensions/appserver/ERXSession.java
===================================================================
--- Sources/er/extensions/appserver/ERXSession.java	(revision 10473)
+++ Sources/er/extensions/appserver/ERXSession.java	(working copy)
@@ -10,6 +10,7 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
+import java.util.TimeZone;
 
 import org.apache.log4j.Logger;
 
@@ -94,6 +95,10 @@
 
   /** the receiver of the various notifications */
   transient private Observer _observer;
+  
+  /** the default session timeZone */
+  private TimeZone _timeZone = TimeZone.getDefault();
+
 
   /**
    * _originalThreadName holds the original name from the WorkerThread which
@@ -742,5 +747,22 @@
 			_convertSessionCookiesToSecure(response);
 		}
 	}
-  
+  	  	
+  	public TimeZone timeZone() {
+  		return _timeZone;
+  	}
+  	
+  	public void setTimeZone(TimeZone timeZone) {
+  		if(timeZone == null) { throw new NullPointerException("timeZone must not be set to null"); }
+  		_timeZone = timeZone;
+  	}
+  	
+  	private static Boolean autoAdjustTimeZone;
+  	
+  	public static boolean autoAdjustTimeZone() {
+  		if(autoAdjustTimeZone == null) {
+  			autoAdjustTimeZone = ERXProperties.booleanForKeyWithDefault("er.extensions.ERXSession.autoAdjustTimeZone", false);
+  		}
+  		return autoAdjustTimeZone;
+  	}
 }
Index: Sources/er/extensions/components/_private/ERXWOString.java
===================================================================
--- Sources/er/extensions/components/_private/ERXWOString.java	(revision 10473)
+++ Sources/er/extensions/components/_private/ERXWOString.java	(working copy)
@@ -13,7 +13,10 @@
 import com.webobjects.appserver._private.WODynamicElementCreationException;
 import com.webobjects.foundation.NSDictionary;
 import com.webobjects.foundation.NSKeyValueCoding;
+import com.webobjects.foundation.NSTimeZone;
+import com.webobjects.foundation.NSTimestampFormatter;
 
+import er.extensions.appserver.ERXSession;
 import er.extensions.formatters.ERXNumberFormatter;
 import er.extensions.formatters.ERXTimestampFormatter;
 
@@ -67,6 +70,7 @@
             valueInComponent = _value.valueInComponent(component);
             if (_shouldFormat) {
                 Format format = null;
+                boolean hasFormatter = false;
                 if (_formatter != null) {
                     format = (Format) _formatter.valueInComponent(component);
                 }
@@ -94,12 +98,39 @@
                 	if (valueInComponent == null) {
                 		// do nothing;
                 	} else {
-                		try {
-                            valueInComponent = format.format(valueInComponent);
-                        } catch (IllegalArgumentException ex) {
-                            log.info("Exception while formatting", ex);
-                            valueInComponent = null;
-                        }
+						if(!hasFormatter && 
+        						format instanceof NSTimestampFormatter && 
+        						wocontext.hasSession() && 
+        						ERXSession.class.isAssignableFrom(wocontext.session().getClass()) &&
+        						ERXSession.autoAdjustTimeZone()
+                				) {
+								
+							synchronized(format) {
+								ERXSession session = (ERXSession)wocontext.session();
+								NSTimeZone zone = NSTimeZone._nstimeZoneWithTimeZone(session.timeZone());
+								NSTimestampFormatter tsFormat = (NSTimestampFormatter)format;
+								NSTimeZone parseZone = tsFormat.defaultParseTimeZone();
+								NSTimeZone formatZone = tsFormat.defaultFormatTimeZone();
+								tsFormat.setDefaultFormatTimeZone(zone);
+								tsFormat.setDefaultParseTimeZone(zone);
+		                		try {
+		                            valueInComponent = format.format(valueInComponent);
+		                        } catch (IllegalArgumentException ex) {
+		                            log.info("Exception while formatting", ex);
+		                            valueInComponent = null;
+		                        } finally {
+		                        	tsFormat.setDefaultFormatTimeZone(formatZone);
+		                        	tsFormat.setDefaultParseTimeZone(parseZone);
+		                        }
+							}
+						} else {
+	                		try {
+	                            valueInComponent = format.format(valueInComponent);
+	                        } catch (IllegalArgumentException ex) {
+	                            log.info("Exception while formatting", ex);
+	                            valueInComponent = null;
+	                        }
+						}
                     }
 
                 } else {
Index: Sources/er/extensions/components/_private/ERXWOTextField.java
===================================================================
--- Sources/er/extensions/components/_private/ERXWOTextField.java	(revision 10473)
+++ Sources/er/extensions/components/_private/ERXWOTextField.java	(working copy)
@@ -16,7 +16,10 @@
 import com.webobjects.appserver._private.WOInput;
 import com.webobjects.foundation.NSDictionary;
 import com.webobjects.foundation.NSLog;
+import com.webobjects.foundation.NSTimeZone;
+import com.webobjects.foundation.NSTimestampFormatter;
 
+import er.extensions.appserver.ERXSession;
 import er.extensions.formatters.ERXNumberFormatter;
 import er.extensions.formatters.ERXTimestampFormatter;
 import er.extensions.foundation.ERXKeyValueCodingUtilities;
@@ -84,6 +87,7 @@
 				Object result = stringValue;
 				if(stringValue != null) {
 					Format format = null;
+					boolean hasFormatter = false;
 					if(stringValue.length() != 0) {
 						if(_formatter != null) {
 							format = (Format)_formatter.valueInComponent(component);
@@ -100,18 +104,49 @@
 									format = ERXNumberFormatter.numberFormatterForPattern(formatString);
 								}
 							}
+						} else {
+							hasFormatter = true;
 						}
 					}
 					if(format != null) {
-						try {
-							Object parsedObject = format.parseObject(stringValue);
-							String reformatedObject = format.format(parsedObject);
-							result = format.parseObject(reformatedObject);
-						} catch(ParseException parseexception) {
-							String keyPath = _value.keyPath();
-							ERXValidationException validationexception = new ERXValidationException(parseexception.getMessage(), stringValue, keyPath);
-							component.validationFailedWithException(validationexception, stringValue, keyPath);
-							return;
+						if(!hasFormatter && 
+        						format instanceof NSTimestampFormatter && 
+        						wocontext.hasSession() && 
+        						ERXSession.class.isAssignableFrom(wocontext.session().getClass()) &&
+        						ERXSession.autoAdjustTimeZone()
+                				) {
+								
+							synchronized(format) {
+								ERXSession session = (ERXSession)wocontext.session();
+								NSTimeZone zone = NSTimeZone._nstimeZoneWithTimeZone(session.timeZone());
+								NSTimestampFormatter tsFormat = (NSTimestampFormatter)format;
+								NSTimeZone parseZone = tsFormat.defaultParseTimeZone();
+								NSTimeZone formatZone = tsFormat.defaultFormatTimeZone();
+								tsFormat.setDefaultFormatTimeZone(zone);
+								tsFormat.setDefaultParseTimeZone(zone);
+								try {
+									Object parsedObject = format.parseObject(stringValue);
+									String reformatedObject = format.format(parsedObject);
+									result = format.parseObject(reformatedObject);
+								} catch(ParseException parseexception) {
+									String keyPath = _value.keyPath();
+									ERXValidationException validationexception = new ERXValidationException(parseexception.getMessage(), stringValue, keyPath);									component.validationFailedWithException(validationexception, stringValue, keyPath);
+									return;
+								} finally {
+									tsFormat.setDefaultFormatTimeZone(formatZone);
+									tsFormat.setDefaultParseTimeZone(parseZone);
+								}
+							}
+						} else {
+							try {
+								Object parsedObject = format.parseObject(stringValue);
+								String reformatedObject = format.format(parsedObject);
+								result = format.parseObject(reformatedObject);
+							} catch(ParseException parseexception) {
+								String keyPath = _value.keyPath();
+								ERXValidationException validationexception = new ERXValidationException(parseexception.getMessage(), stringValue, keyPath);								component.validationFailedWithException(validationexception, stringValue, keyPath);
+								return;
+							}
 						}
 						if(result != null && _useDecimalNumber != null && _useDecimalNumber.booleanValueInComponent(component)) {
 							result = new BigDecimal(result.toString());
@@ -131,6 +166,7 @@
 		if(valueInComponent != null) {
 			String stringValue = null;
 			Format format = null;
+			boolean hasFormatter = false;
 			if(_formatter != null) {
 				format = (Format)_formatter.valueInComponent(component);
 			}
@@ -146,23 +182,58 @@
 						format = ERXNumberFormatter.numberFormatterForPattern(formatString);
 					}
 				}
+			} else {
+				hasFormatter = true;
 			}
-			if(format != null)
-				try {
-					String formatedValue = format.format(valueInComponent);
-					Object reparsedObject = format.parseObject(formatedValue);
-					stringValue = format.format(reparsedObject);
-				} catch(IllegalArgumentException illegalargumentexception) {
-					NSLog._conditionallyLogPrivateException(illegalargumentexception);
-					stringValue = null;
-				} catch(ParseException parseexception) {
-					NSLog._conditionallyLogPrivateException(parseexception);
-					stringValue = null;
-				}
-				if(stringValue == null) {
-					stringValue = valueInComponent.toString();
+			if(format != null) {
+				if(!hasFormatter && 
+						format instanceof NSTimestampFormatter && 
+						wocontext.hasSession() && 
+						ERXSession.class.isAssignableFrom(wocontext.session().getClass()) &&
+						ERXSession.autoAdjustTimeZone()
+        				) {
+						
+					synchronized(format) {
+						ERXSession session = (ERXSession)wocontext.session();
+						NSTimeZone zone = NSTimeZone._nstimeZoneWithTimeZone(session.timeZone());
+						NSTimestampFormatter tsFormat = (NSTimestampFormatter)format;
+						NSTimeZone parseZone = tsFormat.defaultParseTimeZone();
+						NSTimeZone formatZone = tsFormat.defaultFormatTimeZone();
+						tsFormat.setDefaultFormatTimeZone(zone);
+						tsFormat.setDefaultParseTimeZone(zone);
+						try {
+							String formatedValue = format.format(valueInComponent);
+							Object reparsedObject = format.parseObject(formatedValue);
+							stringValue = format.format(reparsedObject);
+						} catch(IllegalArgumentException illegalargumentexception) {
+							NSLog._conditionallyLogPrivateException(illegalargumentexception);
+							stringValue = null;
+						} catch(ParseException parseexception) {
+							NSLog._conditionallyLogPrivateException(parseexception);
+							stringValue = null;
+						} finally {
+							tsFormat.setDefaultFormatTimeZone(formatZone);
+							tsFormat.setDefaultParseTimeZone(parseZone);
+						}
+					}
+				} else {
+					try {
+						String formatedValue = format.format(valueInComponent);
+						Object reparsedObject = format.parseObject(formatedValue);
+						stringValue = format.format(reparsedObject);
+					} catch(IllegalArgumentException illegalargumentexception) {
+						NSLog._conditionallyLogPrivateException(illegalargumentexception);
+						stringValue = null;
+					} catch(ParseException parseexception) {
+						NSLog._conditionallyLogPrivateException(parseexception);
+						stringValue = null;
+					}
 				}
-				woresponse._appendTagAttributeAndValue("value", stringValue, true);
+			}
+			if(stringValue == null) {
+				stringValue = valueInComponent.toString();
+			}
+			woresponse._appendTagAttributeAndValue("value", stringValue, true);
 		}
 	}
 
