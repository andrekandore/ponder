AboveDisplayPropertyKeys: R2D2WExtraDisplayPropertyKeys {
    localContext = d2wContext;
	extraPropertiesKey = "aboveDisplayPropertyKeys";
}

Banner: R2DBannerComponent {
	d2wContext = d2wContext;
}

BelowDisplayPropertyKeys: R2D2WExtraDisplayPropertyKeys {
    localContext = d2wContext;
	extraPropertiesKey = "belowDisplayPropertyKeys";
}

BrowserLabel: WOGenericContainer {
	elementName = "label";
	for = labelID;
}

BrowserLabelString: WOString {
	value = d2wContext.displayNameForEntity;
}

ComponentDiv: WOGenericContainer {
	elementName = "div";
	class = d2wContext.pageConfiguration;
}

CreateLink: WOHyperlink {
	action = newObjectAction;
	string = d2wContext.createButtonLabel;
}

DisplayList: WOConditional {
	condition = displayList;
}

DisplayNew: WOConditional {
	condition = displayNew;
}

DisplayQuery: WOConditional {
	condition = displayQuery;
}

EditButton: WOSubmitButton {
	action = editObjectInRelationship;
	value = d2wContext.editButtonLabel;
}

EntityName: WOString {
	value = d2wContext.displayNameForEntity;
}

HasEntities: WOConditional {
	condition = relationshipDisplayGroup.allObjects.count;
}

HasToOne: WOConditional {
	condition = toOneDescription;
}

Help: R2DDebuggingHelp {
	d2wContext = d2wContext;
}

InspectComponent: D2WEdit {
	action = saveAction;
	entityName = entity.name;
	object = newObjectInRelationship;
}

IsEntityWritable: WOConditional {
	condition = isEntityReadOnly;
	negate = true;
}

IsToMany: WOConditional {
	condition = isRelationshipToMany;
}

IsToOne: WOConditional {
	condition = isRelationshipToMany;
	negate = true;
}

ListComponent: ERXD2WSelect {
	action = selectAction;
	dataSource = selectDataSource;
	entityName = entity.name;
	selectedObject = objectToAddToRelationship;
}

NumberOfEntities: WOString {
	value = relationshipDisplayGroup.allObjects.count;
}

PageWrapper: WOSwitchComponent {
	WOComponentName = pageWrapperName;
}

QueryComponent: D2WQuery {
	action = queryAction;
	entityName = entity.name;
	queryDataSource = selectDataSource;
}

QueryLink: WOHyperlink {
	action = displayQueryAction;
	string = d2wContext.findButtonLabel;
}

RelationshipBrowser: WOBrowser {
	displayString = browserStringForItem;
	id = labelID;
	item = browserItem;
	list = relationshipDisplayGroup.allObjects;
	multiple = true;
	selections = browserSelections;
	size = 4;
}

RemoveToManyButton: WOSubmitButton {
	action = removeFromToManyRelationshipAction;
	value = d2wContext.removeButtonLabel;
}

RemoveToOneButton: WOSubmitButton {
	action = removeFromToOneRelationshipAction;
	value = d2wContext.removeButtonLabel;
}

ReturnLink: WOHyperlink {
	action = returnAction;
	string = d2wContext.returnButtonLabel;
}

ShouldAllowEditingConditional: WOConditional {
	condition = isEntityReadOnly;
	negate = true;
}

ToManyForm: WOForm {
	multipleSubmit = isEntityWritable;
}

ToOneForm: WOForm {
	
}

ToOneValue: WOString {
	value = toOneDescription;
}

