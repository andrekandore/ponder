BatchCount: WOString {
	value = ^displayGroup.batchCount;
}

BatchIndex: WOTextField {
	id = batchIndexID;
	numberformat = "0";
	size = 4;
	value = currentBatchIndex;
}

BatchPage: WOGenericContainer {
	class = "batchPage";
	elementName = "div";
}

BatchSize: WOGenericContainer {
	class = "batchSize";
	elementName = "div";
}

BatchSizeLabel: WOGenericContainer {
	elementName = "label";
	for = batchSizeID;
}

Content: WOComponentContent {
}

DGHasQualifier: ERXNonNullConditional {
	condition = displayGroup.qualifier;
}

EntityName: WOString {
	value = ^objectName;
}

EntityNameConditional: WOConditional {
	condition = hasObjectName;
}

FilteredObjectsCount: WOString {
	value = filteredObjectsCount;
}

HasMultipleBatches: WOConditional {
	condition = ^displayGroup.hasMultipleBatches;
}

IndexLabel: WOGenericContainer {
	elementName = "label";
	for = batchIndexID;
}

ItemsPerBatch: WOTextField {
	id = batchSizeID;
	numberformat = "0";
	size = 4;
	value = numberOfObjectsPerBatch;
}

ItemsPerPage: ERXLocalizedString {
	value = "ERXBatchNavigationBar.items_per_page"; 
}

LeftArrow: ERXLinkButton5 {	
    action = displayPreviousBatch;
    class = "navPrev";
    value = session.localizer.R2DBatchNavigationBar.previous;
}

LeftArrowContent: WOSwitchComponent {
	buttonLabel = session.localizer.R2DBatchNavigationBar.previous;
	localContext = ^d2wContext;
	WOComponentName = ^d2wContext.previousBatchButtonContentComponentName;
}

ObjectsCount: WOString {
	value = objectCount;
}

Of: ERXLocalizedString {
	value = "ERXBatchNavigationBar.of"; 
}

OptionalForm: ERXWOForm {
	disabled = context.isInForm;
}

Page: ERXLocalizedString {
	value = "ERXBatchNavigationBar.page"; 
}

RightArrow: ERXLinkButton5 {
    action = displayNextBatch;
    class = "navNext";
	value = session.localizer.R2DBatchNavigationBar.next;
}

RightArrowContent: WOSwitchComponent {
	buttonLabel = session.localizer.R2DBatchNavigationBar.next;
	localContext = ^d2wContext;
	WOComponentName = ^d2wContext.nextBatchButtonContentComponentName;
}

SortComponent: WOSortOrderManyKey {
	displayGroup = ^displayGroup;
	keyList = ^sortKeyList;
}

SortKeyListConditional: WOConditional {
	condition = hasSortKeyList;
}

