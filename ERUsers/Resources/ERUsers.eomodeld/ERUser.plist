{
    attributes = (
        {columnName = dateCreated; name = dateCreated; prototypeName = jodaDateTime; }, 
        {
            columnName = emailAddress; 
            name = emailAddress; 
            prototypeName = varchar255; 
            width = 254; 
        }, 
        {allowsNull = N; name = id; prototypeName = id; }, 
        {
            columnName = password; 
            name = password; 
            prototypeName = varchar100; 
            width = 128; 
        }, 
        {
            allowsNull = Y; 
            columnName = resetRequestDate; 
            name = resetRequestDate; 
            prototypeName = jodaDateTime; 
        }, 
        {
            allowsNull = Y; 
            columnName = resetToken; 
            name = resetToken; 
            prototypeName = varchar50; 
        }, 
        {columnName = salt; name = salt; prototypeName = varchar255; width = 174; }, 
        {columnName = username; name = username; prototypeName = varchar50; }
    ); 
    attributesUsedForLocking = (emailAddress, id, password, resetToken, salt, username); 
    className = "er.users.model.ERUser"; 
    classProperties = (
        challengeResponses, 
        credentials, 
        dateCreated, 
        emailAddress, 
        password, 
        resetRequestDate, 
        resetToken, 
        salt, 
        username
    ); 
    entityIndexes = (
        {
            attributes = (username); 
            constraint = distinct; 
            indexType = clustered; 
            name = "username_idx"; 
            order = asc; 
        }
    ); 
    externalName = ERUser; 
    fetchSpecificationDictionary = {}; 
    name = ERUser; 
    primaryKeyAttributes = (id); 
    relationships = (
        {
            deleteRule = EODeleteRuleCascade; 
            destination = ERChallengeResponse; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = userID; sourceAttribute = id; }); 
            name = challengeResponses; 
            ownsDestination = Y; 
        }, 
        {
            destination = ERCredential; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = userID; sourceAttribute = id; }); 
            name = credentials; 
        }
    ); 
}
